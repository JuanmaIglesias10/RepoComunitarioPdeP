@startuml

class Comensal {
	dineroDisponible
	tipo 
    leGusta(unPlato)  
	darseUnGustoEn(unaParrilla) 	
	problemasGastricos()
	problemasEconomicos()
}

interface Tipo{
    condicionParaGustar(unPlato)
}

object celiaco{
---
	condicionParaGustar(unPlato) 
}

object paladarFino {
---
	condicionParaGustar(unPlato)  
    esDeTipo(unTipo) 
}

object todoTerreno {
---
	condicionParaGustar(unPlato)
}

class Parrillada {
	platos 
	peso()  
	esEspecial()
	esAptaCeliacos()
    valoracion() 
}

object parrillaDeMiguelito {
	platos 
	clientes 
	agregarCliente(unCliente)
	promocion(unaCantidad) 
}

class Plato {
	
    baseDePrecio() 	
    {abstract} esAptoCeliaco()
    {abstract} valoracion()
    {abstract} esEspecial()
    precio() 
}

class Provoleta extends Plato {
	peso
	estaEmpanado
	esAptoCeliaco()
    esEspecial() 
	valoracion()
}

class BurgaSimple extends Plato {
	tipoDePan
	pesoDeMedallon
	cantMedallones 
	esAptoCeliaco()
	peso()
	valoracion()	
	esEspecial()
}

interface TipoDePan {
    peso() 
	esAptoCeliaco()
}

class BurgaDoble extends BurgaSimple{
	esEspecial()
}

class CorteDeCarne extends Plato {
	corteElegido
	puntoDeCoccion
	peso
	esEspecial()
    esAptoCeliaco()
	valoracion()
}
object panIndustrial {
---
    peso() 
	esAptoCeliaco()
}

object panCasero {
---
	peso()
	esAptoCeliaco()
}

object panDeMaiz {
---
    peso()
	esAptoCeliaco()
}

Comensal .left.> Plato
Comensal ..> parrillaDeMiguelito
Comensal -up-> Tipo
celiaco .up.|> Tipo
paladarFino .up.|> Tipo
todoTerreno .up.|> Tipo 
celiaco ..> Plato
paladarFino ..> Plato
todoTerreno ..> Plato
Parrillada --> "*" Plato : platos
parrillaDeMiguelito --> "*" Plato : platos
parrillaDeMiguelito --> "*" Comensal : clientes
BurgaSimple --> TipoDePan
panCasero ..|> TipoDePan
panDeMaiz ..|> TipoDePan 
panIndustrial ..|> TipoDePan

@enduml